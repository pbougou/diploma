(Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil))))
    
Sharing variables --> Global reasoning
    
1. consuming lists (and, sum, ...)
2. constructing lists ([1..10]) |___  defunctionalized versions
3. modifying lists (map, foldl) |

--------------------------------------------------------------------------------------------------
1. expr = call two_sum Cons 1  Nil , frame#1:
* Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:

================================================================
1. expr = (call sum l 0) + (call length l 0), frame#1:
* Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:

================================================================
1. expr = call sum l 0, frame#1:
* Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:

================================================================
1. expr = case <0> l1 of { Cons ["h","t"] -> call sum (CProj 0 1) ((CProj 0 0) + acc); Nil -> acc }, frame#1:
* Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:

================================================================
1.     expr = l1, frame#1:
* Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:

code-exe: function = main
variable not in formals: Var = l1
formals = []
memory dump: 
***** Memory ******
* Last frame ID : 1
1 -> * Activation record [ function: "main", previous frame: 0 ]
Args:
Suspensions:
