fun sum :: Cons Int -> Int -> Int;
fun sum l1 !acc = 
    case l1 of
        Cons h t -> (call sum t (h + acc))
        Nil -> acc
;

{- Length of a list -}
fun length :: Cons Int -> Int -> Int;
fun length l !acc = 
    case l of 
        Cons h t -> (call length t (acc + 1))
        Nil -> acc;

-- Construct a list from 0 to n 
fun makeList :: Int -> Cons Int -> Cons Int;
fun makeList n !acc = if n then call makeList (n-1) (Cons n acc) else acc;

fun two_sum :: Cons Int -> Int;
fun two_sum l = (call sum l 0) + (call length l 0);

fun main :: Int;
fun main = call two_sum (call makeList 24 Nil)

